name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 只在版本标签时触发

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04 #ubuntu-latest
    strategy:
      matrix:
        architecture: [amd64, arm64]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.6'
          cache: true  # 启用Go依赖缓存

      - name: Build
        run: GOARCH=${{ matrix.architecture }} go build -ldflags="-s -w" -o nat-go-linux-${{ matrix.architecture }} -v ./...
        # 如果构建有特定路径，请调整上面的命令

      - name: Test
        run: go test -v -race -covermode=atomic ./...

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nat-go-linux-${{ matrix.architecture }}
          path: nat-go-linux-${{ matrix.architecture }}
          if-no-files-found: error

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout code for release notes
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "## Changes in ${{ github.ref_name }}" > RELEASE_NOTES.md
          if [ -n "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD >> RELEASE_NOTES.md
          else
            git log --pretty=format:"* %s (%h)" >> RELEASE_NOTES.md
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          find . -type f -name "nat-go-linux-*" -exec cp {} release_assets/ \;

      - name: Release
        uses: ncipollo/release-action@v1.14.0
        with:
          artifacts: "release_assets/*"
          bodyFile: "RELEASE_NOTES.md"
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}